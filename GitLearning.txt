





git config --global user.name "Nemo"
git config --global user.email "345969718@qq.com"

git config user.name
git config user.email


mkdir LearnGit
cd LearnGit
pwd
git init

git add readme.txt

git commit -m "wrote a readme file"


git status

git add                         -->update
git restore readme.txt         -->discard           -->丢弃工作区修改，回到最近一次 git commit 或者 git add 时的状态，实际上就是从暂存区或者版本库进行恢复操作
git restore --staged <file>..." to unstage          -->恢复暂存区，将某个文件的修改从暂存区撤销（git add）


git diff readme.txt


git log
git log --pretty=oneline

commit 45c3a27fe10b37e10b89710df3b7fc47c87c6ccc     -->commit id,一般提交的时候会显示前几位数字
Author: Nemo <345969718@qq.com>                     -->commit Author
Date:   Tue May 24 02:03:11 2022 +0800              -->commit time

git reset --hard HEAD^                              -->修改HEAD指针的位置，修改版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。抛弃某个或某几个commit
git reset --hard xxxxxxx                            -->只要当前窗口没有关闭，可以回滚到对应的commit id


git reflog                                          -->查看命令历史，终极后悔药，关闭了窗口时，可以通过该命令获取之前的所有操作记录


工作区、暂存区、版本库


记录修改状态而不是记录文件

git diff HEAD -- GitLearning



git reset HEAD <file>                               -->修改某个文件，可以把暂存区的修改撤销掉（unstage），重新放回工作区，实际上就是恢复某个文件在暂存区的修改的同时，使用版本库对该文件进行恢复
git reset HEAD readme.txt

git rm test.txt
git commit -m "remove test.txt"

tips：
git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。
git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。


//远程仓库

由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：

第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
ssh-keygen -t rsa -C "345969718@qq.com"

如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。

第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容

因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。

当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。

秘钥是唯一的，可以唯一的标识一台机器，只有在机器上根据GitHub账户生成了秘钥并将Key加入到该GitHub账户的，才被允许连接该GitHub账户并推送提交


git remote add origin git@github.com:HDFirst/LearnGit.git
git push -u origin master

由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令

git push origin master
git remote -v
git remote rm origin


git clone git@github.com:HDFirst/CloneTest.git












